pipeline {
    agent any

    environment {
        IMAGE_NAME = 'lambda_function.zip'
        BUCKET_NAME = 's3-jenkins-lambda'
        LAMBDA_FUNCTION_NAME = 'blue-green-lambda'
        DEPLOYMENT_GROUP_NAME = 'blue-green-deployment-group'
        CODEDEPLOY_APPLICATION_NAME = 'blue-green-lambda'
        SNS_TOPIC_ARN = credentials('sns-topic-arn')
        AWS_DEFAULT_REGION = 'us-east-1'
        LAMBDA_EXECUTION_ROLE_ARN = credentials('lambda-execution-role-arn')
        CODEDEPLOY_SERVICE_ROLE_ARN = credentials('codedeploy-service-role-arn')
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/ToluGIT/testlambda.git'
            }
        }

        stage('Security: Static Code Analysis') {
            steps {
                echo 'Running Static Code Analysis with Bandit...'
                sh 'bandit -r lambda_function.py -f json -o bandit_report.json || true'
                archiveArtifacts artifacts: 'bandit_report.json', fingerprint: true
            }
        }

        stage('Debug: Print Bandit Report') {
            steps {
                echo 'Contents of bandit_report.json:'
                sh 'cat bandit_report.json || echo "bandit_report.json not found or empty"'
            }
        }

        stage('Security: Dependency Scan') {
            steps {
                echo 'Running Dependency Vulnerability Scan with Safety...'
                sh '''
                    if [ -f requirements.txt ]; then
                        safety check -r requirements.txt --json --full-report > safety_report.json || true
                    else
                        echo 'No requirements.txt found, skipping dependency scan.'
                    fi
                '''
                archiveArtifacts artifacts: 'safety_report.json', fingerprint: true, allowEmptyArchive: true
            }
        }

        stage('Debug: Print Safety Report') {
            steps {
                echo 'Contents of safety_report.json:'
                sh 'cat safety_report.json || echo "safety_report.json not found or empty"'
            }
        }

        stage('Security: Infrastructure Scan') {
            steps {
                echo 'Scanning CloudFormation Template with cfn-nag...'
                sh 'cfn_nag_scan --input-path deployment_production.yaml --output-format json > cfn_nag_report.json || true'
                archiveArtifacts artifacts: 'cfn_nag_report.json', fingerprint: true
            }
        }

        stage('Security: Evaluate Reports') {
            steps {
                script {
                    def failBuild = false

                    // Evaluate Bandit Report
                    if (fileExists('bandit_report.json')) {
                        def banditReport = readJSON file: 'bandit_report.json'
                        def totals = banditReport.metrics._totals
                        echo "Bandit Report Metrics Totals: ${totals}"

                        // Access 'SEVERITY.HIGH' key
                        def highSeverityIssues = totals['SEVERITY.HIGH'] ?: 0
                        echo "High Severity Issues Found: ${highSeverityIssues}"

                        if (highSeverityIssues > 0) {
                            echo "Found ${highSeverityIssues} high severity issues in static code analysis."
                            failBuild = true
                        } else {
                            echo "No high severity issues found in static code analysis."
                        }
                    } else {
                        echo 'bandit_report.json not found.'
                    }

                    // Evaluate Safety Report
                    if (fileExists('safety_report.json')) {
                        def safetyReport = readJSON file: 'safety_report.json'
                        def vulnerabilities = safetyReport.vulnerabilities ?: []
                        if (vulnerabilities.size() > 0) {
                            echo "Found ${vulnerabilities.size()} vulnerable dependencies."
                            vulnerabilities.each { dep ->
                                echo "Dependency '${dep.package_name}' version '${dep.installed_version}' has vulnerabilities:"
                                dep.vulnerabilities.each { vuln ->
                                    echo "- [${vuln.severity}] ${vuln.advisory} (CVE: ${vuln.cve})"
                                }
                            }
                            failBuild = true
                        } else {
                            echo 'No vulnerable dependencies found.'
                        }
                    } else {
                        echo 'safety_report.json not found.'
                    }

                    // Evaluate cfn-nag Report
                    if (fileExists('cfn_nag_report.json')) {
                        def cfnNagReport = readJSON file: 'cfn_nag_report.json'

                        if (cfnNagReport.file_results) {
                            cfnNagReport.file_results.each { fileResult ->
                                if (fileResult.file_results && fileResult.file_results.violations) {
                                    fileResult.file_results.violations.each { violation ->
                                        if (violation.type == 'FAIL') {
                                            echo "Security issues found in CloudFormation template: ${violation.id} - ${violation.message}"
                                            failBuild = true
                                        }
                                    }
                                }
                            }
                        } else {
                            echo 'No file_results found in cfn-nag report.'
                        }
                    }

                    if (failBuild) {
                        error 'Security checks failed. Please address the issues and retry.'
                    } else {
                        echo 'No critical security issues found.'
                    }
                }
            }
        }

        // ... Rest of your stages ...

        stage('Build Lambda Package') {
            steps {
                sh 'zip lambda_function.zip lambda_function.py appspec.yaml'
            }
        }

        stage('Upload to S3') {
            steps {
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    s3Upload(bucket: "${BUCKET_NAME}", path: 'lambda_function.zip', file: 'lambda_function.zip')
                }
            }
        }

        // ... Other stages ...

    }

    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
        failure {
            // Send failure notification
            echo 'Build failed. Sending notification...'
            // Add notification logic here
        }
    }
}
