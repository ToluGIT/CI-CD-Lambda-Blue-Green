pipeline {
    agent any

    environment {
        // AWS and application-specific environment variables
        IMAGE_NAME = 'lambda_function.zip'
        BUCKET_NAME = 's3-jenkins-lambda'
        LAMBDA_FUNCTION_NAME = 'blue-green-lambda'
        DEPLOYMENT_GROUP_NAME = 'blue-green-deployment-group'
        CODEDEPLOY_APPLICATION_NAME = 'blue-green-lambda'
        SNS_TOPIC_ARN = credentials('sns-topic-arn')
        AWS_DEFAULT_REGION = 'us-east-1'
        LAMBDA_EXECUTION_ROLE_ARN = credentials('lambda-execution-role-arn')
        CODEDEPLOY_SERVICE_ROLE_ARN = credentials('codedeploy-service-role-arn')
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                // Clean the workspace to prevent old artifacts from interfering
                deleteDir()
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/YourUsername/YourRepository.git'
            }
        }

        stage('Security: Static Code Analysis') {
            steps {
                echo 'Running Static Code Analysis with Bandit...'
                sh 'bandit -r lambda_function.py -f json -o bandit_report.json || true'
                archiveArtifacts artifacts: 'bandit_report.json', fingerprint: true
            }
        }

        stage('Security: Dependency Scan') {
            steps {
                echo 'Running Dependency Vulnerability Scan with Safety...'
                sh '''
                    if [ -f requirements.txt ]; then
                        safety check -r requirements.txt --json > safety_report.json || true
                    else
                        echo 'No requirements.txt found, skipping dependency scan.'
                    fi
                '''
                archiveArtifacts artifacts: 'safety_report.json', fingerprint: true, allowEmptyArchive: true
            }
        }

        stage('Security: Infrastructure Scan') {
            steps {
                echo 'Scanning CloudFormation Template with cfn-nag...'
                sh 'cfn_nag_scan --input-path deployment_production.yaml --output-format json > cfn_nag_report.json || true'
                archiveArtifacts artifacts: 'cfn_nag_report.json', fingerprint: true
            }
        }

        stage('Security: Evaluate Reports') {
            steps {
                script {
                    def failBuild = false

                    // Evaluate Bandit Report
                    if (fileExists('bandit_report.json')) {
                        def banditReport = readJSON file: 'bandit_report.json'
                        if (banditReport.metrics._totals.high > 0) {
                            echo 'High severity issues found in static code analysis.'
                            failBuild = true
                        }
                    }

                    // Evaluate Safety Report
                    if (fileExists('safety_report.json')) {
                        def safetyReport = readJSON file: 'safety_report.json'
                        if (safetyReport.issues.size() > 0) {
                            echo 'Vulnerable dependencies found.'
                            failBuild = true
                        }
                    }

                    // Evaluate cfn-nag Report
                    if (fileExists('cfn_nag_report.json')) {
                        def cfnNagReport = readJSON file: 'cfn_nag_report.json'
                        cfnNagReport.files.each { file ->
                            file.failure_results.each { result ->
                                if (result.level == 'ERROR' || result.level == 'FAIL') {
                                    echo "Security issues found in CloudFormation template: ${result.id} - ${result.message}"
                                    failBuild = true
                                }
                            }
                        }
                    }

                    if (failBuild) {
                        error 'Security checks failed. Please address the issues and retry.'
                    } else {
                        echo 'No critical security issues found.'
                    }
                }
            }
        }

        stage('Build Lambda Package') {
            steps {
                // Package the Lambda function code and appspec.yaml into a zip file
                sh 'zip lambda_function.zip lambda_function.py appspec.yaml'
            }
        }

        stage('Verify Zip Contents') {
            steps {
                // List the contents of the zip file to verify inclusion of all necessary files
                sh 'unzip -l lambda_function.zip'
            }
        }

        stage('Upload to S3') {
            steps {
                // Upload the zip file to S3
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    s3Upload(bucket: "${BUCKET_NAME}", path: 'lambda_function.zip', file: 'lambda_function.zip')
                }
            }
        }

        stage('Deploy to Lambda') {
            steps {
                // Deploy the Lambda function and update the alias
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    script {
                        def aliasExists = sh(
                            script: "aws lambda get-alias --function-name ${LAMBDA_FUNCTION_NAME} --name live",
                            returnStatus: true
                        ) == 0

                        if (aliasExists) {
                            echo 'Updating existing Lambda function...'

                            // Update the Lambda function code from S3
                            def updateResult = sh(
                                script: """
                                    aws lambda update-function-code \
                                        --function-name ${LAMBDA_FUNCTION_NAME} \
                                        --s3-bucket ${BUCKET_NAME} \
                                        --s3-key lambda_function.zip
                                """,
                                returnStatus: true
                            )
                            if (updateResult != 0) {
                                error 'Failed to update Lambda function code.'
                            } else {
                                echo 'Lambda function code updated successfully.'
                            }

                            env.INITIAL_DEPLOYMENT = 'false'
                        } else {
                            echo 'Creating new Lambda function, alias, and CodeDeploy resources...'

                            // Deploy the CloudFormation stack to create the necessary resources
                            def deployResult = sh(
                                script: """
                                    aws cloudformation deploy \
                                        --template-file deployment.yaml \
                                        --stack-name lambda-blue-green-stack \
                                        --capabilities CAPABILITY_NAMED_IAM \
                                        --parameter-overrides \
                                            LambdaExecutionRoleArn=${LAMBDA_EXECUTION_ROLE_ARN} \
                                            CodeDeployServiceRoleArn=${CODEDEPLOY_SERVICE_ROLE_ARN} \
                                            LambdaFunctionName=${LAMBDA_FUNCTION_NAME} \
                                            CodeDeployApplicationName=${CODEDEPLOY_APPLICATION_NAME} \
                                            DeploymentGroupName=${DEPLOYMENT_GROUP_NAME} \
                                            S3BucketName=${BUCKET_NAME} \
                                            S3Key=lambda_function.zip
                                """,
                                returnStatus: true
                            )
                            if (deployResult != 0) {
                                error 'Failed to deploy CloudFormation stack.'
                            } else {
                                echo 'CloudFormation stack deployed successfully.'
                            }

                            env.INITIAL_DEPLOYMENT = 'true'
                        }
                    }
                }
            }
        }

        // Conditionally execute the following stages only if it's not the initial deployment
        stage('Update AppSpec File') {
            when {
                expression {
                    env.INITIAL_DEPLOYMENT == 'false'
                }
            }
            steps {
                // Update the appspec.yaml file with the correct CurrentVersion and TargetVersion
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    script {
                        // Retrieve the current version the alias points to
                        def currentVersion = sh(
                            script: "aws lambda get-alias --function-name ${LAMBDA_FUNCTION_NAME} --name live --query 'FunctionVersion' --output text",
                            returnStdout: true
                        ).trim()
                        echo "Current Lambda version: ${currentVersion}"

                        // Publish a new version of the Lambda function
                        def targetVersion = sh(
                            script: "aws lambda publish-version --function-name ${LAMBDA_FUNCTION_NAME} --query Version --output text",
                            returnStdout: true
                        ).trim()
                        echo "Published new Lambda version: ${targetVersion}"

                        // DO NOT update the alias here; let CodeDeploy handle it
                        // Update the appspec.yaml file with the retrieved versions
                        sh """
                            sed -i 's/{{CURRENT_VERSION}}/${currentVersion}/g' appspec.yaml
                            sed -i 's/{{TARGET_VERSION}}/${targetVersion}/g' appspec.yaml
                        """
                        echo 'AppSpec file updated with current and target versions.'
                    }
                }
            }
        }

        stage('Verify AppSpec File') {
            when {
                expression {
                    env.INITIAL_DEPLOYMENT == 'false'
                }
            }
            steps {
                // Output the contents of the updated appspec.yaml for verification
                sh 'cat appspec.yaml'
            }
        }

        stage('Repackage Lambda Function') {
            when {
                expression {
                    env.INITIAL_DEPLOYMENT == 'false'
                }
            }
            steps {
                // Repackage the Lambda function with the updated appspec.yaml
                sh 'zip -u lambda_function.zip appspec.yaml'
            }
        }

        stage('Re-upload to S3') {
            when {
                expression {
                    env.INITIAL_DEPLOYMENT == 'false'
                }
            }
            steps {
                // Re-upload the updated zip file to S3
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    s3Upload(bucket: "${BUCKET_NAME}", path: 'lambda_function.zip', file: 'lambda_function.zip')
                }
            }
        }

        stage('Blue-Green Traffic Shift') {
            steps {
                // Initiate the CodeDeploy deployment to perform the traffic shift
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    script {
                        def deployResult = sh(
                            script: """
                                aws deploy create-deployment \
                                    --application-name ${CODEDEPLOY_APPLICATION_NAME} \
                                    --deployment-group-name ${DEPLOYMENT_GROUP_NAME} \
                                    --deployment-config-name CodeDeployDefault.LambdaAllAtOnce \
                                    --s3-location bucket=${BUCKET_NAME},key=lambda_function.zip,bundleType=zip
                            """,
                            returnStatus: true
                        )
                        if (deployResult != 0) {
                            error 'Failed to create CodeDeploy deployment.'
                        } else {
                            echo 'CodeDeploy deployment created successfully.'
                        }
                    }
                }
            }
        }

        stage('Notify via SNS') {
            steps {
                // Send a notification via SNS upon successful deployment
                withAWS(credentials: 'aws', region: "${AWS_DEFAULT_REGION}") {
                    script {
                        def snsResult = sh(
                            script: """
                                aws sns publish --topic-arn $SNS_TOPIC_ARN \
                                --message 'Lambda function deployed successfully!'
                            """,
                            returnStatus: true
                        )
                        if (snsResult != 0) {
                            echo 'Failed to send SNS notification.'
                        } else {
                            echo 'SNS notification sent successfully.'
                        }
                    }
                }
            }
        }

        // Optional: Add Slack notification stage if Slack integration is required
        // stage('Notify via Slack') {
        //     steps {
        //         slackSend(channel: '#deployments', message: 'Lambda function deployed successfully!')
        //     }
        // }
    }

    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
        failure {
            // Send failure notification
            echo 'Build failed. Sending notification...'
            // Add notification logic here
        }
    }
}
